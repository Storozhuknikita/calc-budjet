{"version":3,"sources":["components/expanse/expanse.jsx","components/incomes/incomes.jsx","App.js","serviceWorker.js","index.js"],"names":["Expanse","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleTransationChange","number","setState","transation","handleCategoryChange","category","handleClick","_this$state","state","onSubmit","Math","abs","parseFloat","console","log","react_default","a","createElement","className","input_default","label","placeholder","view","type","value","onChange","icon","currency_rub_default","size","button_default","onClick","Component","Incomes","App","onToday","transactions","date","currentMonthTransaction","filter","_ref","transactionDate","moment","isSame","dailyMoney","reduce","acc","transaction","sum","dailyExpanse","newDailyExpanse","daysInMonth","handleCalendarChange","newDate","split","concat","handleSubstractDay","subtract","handleAddDay","add","handleTabSelectedClick","event","tabSelected","target","getAttribute","handleSubmitTransaction","_this$state2","TodayDate","_this$state2$transact","newTransaction","format","newTransactions","toConsumableArray","push","sortBy","initState","storageState","localStorage","getItem","JSON","parse","objectSpread","prevProps","prevState","snapshot","setItem","stringify","_this2","_this$state3","calendar_input_default","sell_default","buy_default","tabs_default","tab_item_default","checked","id","expanse","incomes","renderAmount","_ref2","map","item","index","key","AMOUNT","currency","code","minority","amount_default","amount","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0fae67c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Input from 'arui-feather/input';\nimport IconCurrencyRub from 'arui-feather/icon/currency/currency-rub';\nimport Button from 'arui-feather/button';\n\n\nclass Expanse extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            transation: '',\n            category: ''\n        };\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"row-flex\">\n                <div className=\"col\">\n                    <Input\n                        label='Расходы'\n                        placeholder='Внесите расходы'\n                        view='line'\n                        type='number'\n                        value={this.state.transation}\n                        onChange={this.handleTransationChange}\n                        icon={\n                            <IconCurrencyRub size={'s'}/>\n                        }\n                    />\n                </div>\n\n                <div className=\"col\">\n                    <Input\n                        label='Категория'\n                        placeholder='Внесите категорию'\n                        value={this.state.category}\n                        onChange={this.handleCategoryChange}\n                        view='line'\n                    />\n                </div>\n\n                <div className=\"col\">\n                    <Button\n                        view='extra'\n                        onClick={this.handleClick}>\n                        Внести\n                    </Button>\n                </div>\n\n            </div>\n\n        )\n    }\n\n    handleTransationChange = (number) => {\n        this.setState({\n            transation: number\n        })\n    };\n\n    handleCategoryChange = (category) => {\n        this.setState({\n            category: category\n        })\n    };\n\n    handleClick = () => {\n\n        const { transation, category} = this.state;\n        this.props.onSubmit((-1 * Math.abs(parseFloat(transation))), category);\n\n        console.log('###: handleClick ');\n        console.log('###: this.state ', this.state );\n\n        this.setState({\n            transation: '',\n            category: ''\n        });\n\n\n    }\n}\n\nexport default Expanse;","import React, {Component} from 'react';\nimport Input from 'arui-feather/input';\nimport IconCurrencyRub from 'arui-feather/icon/currency/currency-rub';\nimport Button from 'arui-feather/button';\n\n\nclass Incomes extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            transation: '',\n            category: ''\n        };\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"row-flex\">\n                <div className=\"col\">\n                    <Input\n                        label='Доходы'\n                        placeholder='Внесите доходы'\n                        view='line'\n                        type='number'\n                        value={this.state.transation}\n                        onChange={this.handleTransationChange}\n                        icon={\n                            <IconCurrencyRub size={'s'}/>\n                        }\n                    />\n                </div>\n\n                <div className=\"col\">\n                    <Input\n                        label='Категория'\n                        placeholder='Внесите категорию'\n                        value={this.state.category}\n                        onChange={this.handleCategoryChange}\n                        view='line'\n                    />\n                </div>\n\n                <div className=\"col\">\n                    <Button\n                        view='extra'\n                        onClick={this.handleClick}>\n                        Добавить\n                    </Button>\n                </div>\n\n            </div>\n\n        )\n    }\n\n    handleTransationChange = (number) => {\n        this.setState({\n            transation: number\n        })\n    };\n\n    handleCategoryChange = (category) => {\n        this.setState({\n            category: category\n        })\n    };\n\n    handleClick = () => {\n\n        const { transation, category} = this.state;\n        this.props.onSubmit((Math.abs(parseFloat(transation))), category);\n\n        console.log('###: handleClick ');\n        console.log('###: this.state ', this.state );\n\n        this.setState({\n            transation: '',\n            category: ''\n        });\n\n\n    }\n}\n\nexport default Incomes;","import React, {Component} from 'react';\nimport './App.css';\n\nimport CalendarInput from 'arui-feather/calendar-input';\nimport Button from 'arui-feather/button';\nimport IconBuy from 'arui-feather/icon/ui/buy';\nimport IconSell from 'arui-feather/icon/ui/sell';\n\nimport Tabs from 'arui-feather/tabs';\nimport TabItem from 'arui-feather/tab-item';\n\nimport moment from 'moment';\n\nimport Expanse from './components/expanse/expanse';\nimport Incomes from './components/incomes/incomes';\n\nimport sortBy from 'lodash/sortBy';\nimport Amount from 'arui-feather/amount';\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    let storageState = localStorage.getItem('state');\n    let initState;\n\n    if(storageState !== null){\n        storageState = JSON.parse(storageState);\n        initState = { ... storageState, date: moment(storageState.date)}\n    } else {\n        initState = {\n            date: moment(),\n            tabSelected: 'expanse',\n            transactions: []\n        }\n    }\n\n    this.state = initState;\n\n\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n      const {date} = this.state;\n\n      localStorage.setItem('state', JSON.stringify({... this.state, date: date.format() }));\n      console.log('###: localStorage: ', localStorage);\n  }\n\n\n    render() {\n    const {date, tabSelected, transactions} = this.state;\n    return (\n        <div className=\"App\">\n            <h1>Реактивный бюджет</h1>\n\n            <div className={'row'}>\n              <p>\n                <CalendarInput\n                  value={ date.format('DD.MM.YYYY')}\n                  onChange={this.handleCalendarChange}\n                />\n              </p>\n            </div>\n\n            <div className={'row'}>\n\n                <Button size={'s'} view='action' onClick={this.handleSubstractDay}>\n                    <IconSell/>\n                </Button>\n\n                <Button size={'s'} view='action' onClick={this.handleAddDay}>\n                    <IconBuy/>\n                </Button>\n\n            </div>\n\n            <div className=\"row\">\n\n                <Tabs>\n                    <TabItem onClick={ this.handleTabSelectedClick } checked={ tabSelected === 'expanse' } id='expanse'>\n                        Расходы\n                    </TabItem>\n                    <TabItem onClick={ this.handleTabSelectedClick } checked={ tabSelected === 'incomes' } id='incomes'>\n                        Доходы\n                    </TabItem>\n                </Tabs>\n\n            </div>\n\n            <div className=\"row\">\n                {\n                    tabSelected === 'expanse' ? (\n                        <Expanse onSubmit={this.handleSubmitTransaction}/>\n                    ) : (\n                        <Incomes onSubmit={this.handleSubmitTransaction}/>\n                    )\n                }\n            </div>\n\n\n            <div className=\"row\">\n                На сегодня: {this.renderAmount(this.onToday())}\n            </div>\n            <div className=\"row\">\n\n                <table>\n                    <thead>\n                        <td>Дата:</td>\n                        <td>Сумма:</td>\n                        <td>Категория:</td>\n                    </thead>\n                    <tbody>\n                    {\n                        transactions.filter(\n                            ({date: transactionDate}) => moment(transactionDate, 'DD.MM.YYYY').isSame(date, 'month')\n                        )\n                        .map(\n                            (item, index) => (\n                                <tr key={index}>\n                                    <td>\n                                        {item.date}\n                                    </td>\n                                    <td>\n                                        Сумма: {this.renderAmount(item.sum)}\n                                    </td>\n                                    <td>\n                                        Категория: {item.category}\n                                    </td>\n                                </tr>\n                            )\n                        )\n                    }\n                    </tbody>\n                </table>\n\n            </div>\n\n        </div>\n    );\n  }\n\n  renderAmount(sum) {\n\n      const AMOUNT = {\n          value: sum,\n          currency: {\n              code: 'RUR',\n              minority: 1\n          }\n      };\n\n      return (\n          <Amount amount={AMOUNT}></Amount>\n      );\n  }\n\n  onToday = () => {\n      const { transactions, date} = this.state;\n\n      const currentMonthTransaction = transactions.filter(\n          ({date: transactionDate}) => moment(transactionDate, 'DD.MM.YYYY').isSame(date, 'month')\n      );\n\n      console.log('### currentMonthTransaction: ', currentMonthTransaction);\n\n      const dailyMoney = currentMonthTransaction.reduce(\n          (acc, transaction) => transaction.sum > 0 ? transaction.sum + acc: acc, 0\n      );\n\n      const dailyExpanse = currentMonthTransaction.reduce(\n          (acc, transaction) => transaction.sum < 0 ? transaction.sum + acc: acc, 0\n      );\n\n      const newDailyExpanse = dailyMoney - Math.abs(dailyExpanse);\n\n      console.log('###dailyExpanse: ', dailyExpanse);\n\n\n      console.log('##dailyMoney: ', dailyMoney);\n      console.log('##newDailyExpanse: ', newDailyExpanse);\n      return dailyMoney / moment(date).daysInMonth();\n  };\n\n  // обработка даты\n  handleCalendarChange = (date) => {\n    const newDate = date.split('.');\n      this.setState({\n        date: moment(`${newDate[2]}-${newDate[1]}-${newDate[0]}`)\n    });\n  };\n\n  // кнопка уменьшения дня\n  handleSubstractDay = () => {\n    this.setState({\n        date: this.state.date.subtract(1, 'day')\n    });\n  };\n\n  // кнопка увеличения дня\n  handleAddDay = () => {\n    this.setState({\n        date: this.state.date.add(1, 'day')\n    });\n  };\n\n  handleTabSelectedClick = (event) => {\n    console.log('####: handleTabSelectedClick ');\n\n    this.setState({\n        tabSelected: event.target.getAttribute('id')\n    });\n  };\n\n  handleSubmitTransaction = (sum, category) => {\n      console.log('### sum ', sum);\n      console.log('### category ', category);\n\n      const {date: TodayDate, transactions = []} = this.state;\n      const newTransaction = {\n          date: TodayDate.format('DD-MM-YYYY'),\n          category,\n          sum\n      };\n\n      const newTransactions = [... transactions];\n      newTransactions.push(newTransaction);\n\n      this.setState({\n          transactions: sortBy(newTransactions, ['date'])\n      });\n\n      console.log(this.state.transactions);\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}